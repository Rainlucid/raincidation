using System.Linq;
using Content.Shared._RD.Character;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._RD._Content.UI.Lobby.Character.Editor;

[GenerateTypedNameReferences]
public sealed partial class RDCharacterEditorDescriptionControl : Control
{
    private readonly ProtoId<SpeciesPrototype> _species = "RDHuman";

    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly MetaDataSystem _metaData;

    private RDCharacterEditorWindow? _window;

    private EntityUid _previewDummy;

    private SpeciesPrototype Species => _prototype.Index(_species);
    private RDCharacterProfile Profile
    {
        get => _window?.Profile ?? RDCharacterProfile.Default;
        set => _window!.Profile = value;
    }

    public RDCharacterEditorDescriptionControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // Systems
        _metaData = _entity.System<MetaDataSystem>();

        NameEdit.OnTextChanged += OnNameChanged;
        AgeEdit.OnTextChanged += OnAgeChanged;
        HeightEdit.OnTextChanged += OnHeightChanged;
        SexOption.OnItemSelected += OnSexSelected;

        SpriteView.OnKeyBindDown += _ => Logger.Debug("Test");

        InitState();
        UpdatePreview();
        UpdateSex();
        UpdateOrigins();
    }

    public void Startup(RDCharacterEditorWindow window)
    {
        _window = window;
        InitState();
    }

    private void InitState()
    {
        NameEdit.Text = Profile.Name;
        AgeEdit.Text = Profile.Age.ToString();
        HeightEdit.Text = Profile.Height.ToString();
    }

    private void UpdatePreview()
    {
        _entity.DeleteEntity(_previewDummy);
        _previewDummy = CreateEntity();

        SpriteView.SetEntity(_previewDummy);
        _metaData.SetEntityName(_previewDummy, Profile.Name);
    }

    private void UpdateSex()
    {
        SexOption.Clear();
        foreach (var sex in Species.Sexes)
        {
            SexOption.AddItem(Loc.GetString($"humanoid-profile-editor-sex-{sex.ToString().ToLower()}-text"), (int) sex);
        }
    }

    private void UpdateOrigins()
    {
        OriginOption.Clear();

        var speciesList = _prototype.EnumeratePrototypes<SpeciesPrototype>()
            .Where(prototype => prototype.RoundStart)
            .OrderBy(prototype => Loc.GetString(prototype.Name));

        var i = 0;
        foreach (var species in speciesList)
        {
            OriginOption.AddItem(Loc.GetString(species.Name), i);
            i++;
        }
    }

    private EntityUid CreateEntity()
    {
        var dummyPrototype = _prototype.Index(Profile.Species).DollPrototype;
        var dummyUid = _entity.SpawnEntity(dummyPrototype, MapCoordinates.Nullspace);
        return dummyUid;
    }

    private void OnNameChanged(LineEdit.LineEditEventArgs args)
    {
        Profile = new RDCharacterProfile(Profile)
        {
            Name = args.Text,
        };
    }

    private void OnAgeChanged(LineEdit.LineEditEventArgs args)
    {
        if (!int.TryParse(args.Text, out var value))
            return;

        Profile = new RDCharacterProfile(Profile)
        {
            Age = value,
        };
    }

    private void OnHeightChanged(LineEdit.LineEditEventArgs args)
    {
        if (!int.TryParse(args.Text, out var value))
            return;

        Profile = new RDCharacterProfile(Profile)
        {
            Height = value,
        };
    }

    private void OnSexSelected(OptionButton.ItemSelectedEventArgs args)
    {
        SexOption.Select(args.Id);
        Profile = new RDCharacterProfile(Profile)
        {
            Sex = (Sex) args.Id,
        };
    }
}
